/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Game/computerAI.js":
/*!********************************!*\
  !*** ./src/Game/computerAI.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ComputerAI)\n/* harmony export */ });\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player.js */ \"./src/Game/player.js\");\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ship.js */ \"./src/Game/ship.js\");\n\r\n\r\n\r\nclass ComputerAI extends _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor(name) {\r\n        super(name); \r\n\r\n    }\r\n\r\n\r\n    // Automatically place ships on the board\r\n    placeShipsAutomatically(shipTypes) {\r\n        shipTypes.forEach(shipType => {\r\n            let placed = false;\r\n\r\n            while (!placed) {\r\n                const position = this.getRandomPosition();\r\n                const orientation = this.getRandomOrientation();\r\n                const ship = new _ship_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](shipType.name, shipType.length, position, orientation);\r\n                if (this.canPlaceShip(ship)) {\r\n                    this.board.placeShip(ship.type, ship.length, ship.position, ship.direction);\r\n                    this.ships.push(ship);\r\n                    placed = true; \r\n                } else {\r\n                    //console.log(`Cannot place ${ship.name} at ${ship.position} ${orientation}, trying a new position...`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Check if the ship can be placed at the given position and orientation\r\n    canPlaceShip(ship) {\r\n        const [x, y] = ship.position;\r\n\r\n        //console.log(`Checking position: ${ship.position}, Orientation: ${ship.direction}`); \r\n    \r\n        if (ship.direction === 'horizontal') {\r\n            if (y + ship.length > this.board.getSize() || x >= this.board.getSize()) { \r\n                //console.log(`Out of bounds: ${x}, ${y} with length ${ship.length}`);\r\n                return false; \r\n            }\r\n\r\n            for (let i = 0; i < ship.length; i++) {\r\n                if (this.board.getCell(x, y + i) !== null) { \r\n                    //console.log(`Position occupied at: ${x}, ${y + i}`);\r\n                    return false; \r\n                }\r\n            }\r\n        } else if (ship.direction === 'vertical') {\r\n            if (x + ship.length > this.board.getSize() || y >= this.board.getSize()) {\r\n                //console.log(`Out of bounds: ${x}, ${y} with length ${ship.length}`);\r\n                return false; \r\n            }\r\n            for (let i = 0; i < ship.length; i++) {\r\n                if (this.board.getCell(x + i, y) !== null) {\r\n                    //console.log(`Position occupied at: ${x + i}, ${y}`);\r\n                    return false; \r\n                }\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    // Get a random position within the board\r\n    getRandomPosition() {\r\n        const x = Math.floor(Math.random() * this.board.getSize()); // Use getSize() for both dimensions\r\n        const y = Math.floor(Math.random() * this.board.getSize());\r\n        return [x, y];\r\n    }\r\n\r\n    // Get a random orientation for placing ships\r\n    getRandomOrientation() {\r\n        return Math.random() < 0.5 ? 'horizontal' : 'vertical'; // Randomly returns either 'horizontal' or 'vertical'\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://my-webpack-template/./src/Game/computerAI.js?");

/***/ }),

/***/ "./src/Game/gameBoard.js":
/*!*******************************!*\
  !*** ./src/Game/gameBoard.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameBoard)\n/* harmony export */ });\nclass GameBoard {\r\n    constructor(size, name) {\r\n        this.board = Array(size).fill(null).map(() => Array(size).fill(null));\r\n        this.ships = []; \r\n        this.name = name;\r\n        //this.printName();\r\n        this.size = size;\r\n    }\r\n\r\n    serializeBoard() {\r\n        return {\r\n            size: this.size,\r\n            grid: this.board\r\n        };\r\n    }\r\n\r\n    deserializeBoard(serializedData) {\r\n        this.size = serializedData.size;\r\n        this.board = serializedData.grid || serializedData.board; // Ensure correct deserialization\r\n        // console.table(this.board); \r\n    }\r\n\r\n    // Example method to display the board\r\n    printBoard() {\r\n        return this.grid;\r\n    }\r\n\r\n    printName(){\r\n        console.log(`Player ${this.name}'s Board:`);\r\n    }\r\n\r\n    placeShip(shipName, shipSize, position, direction = 'horizontal') {\r\n        const [x, y] = position;\r\n    \r\n\r\n        if (x < 0 || x >= this.board.length || y < 0 || y >= this.board[x].length) {\r\n            return false; \r\n        }\r\n    \r\n        if (direction === 'horizontal') {\r\n            if (y + shipSize > this.board[x].length) {\r\n                return false; \r\n            }\r\n            for (let i = 0; i < shipSize; i++) {\r\n                if (this.board[x][y + i] !== null) {\r\n                    return \"Occupied\"; \r\n                }\r\n            }\r\n            for (let i = 0; i < shipSize; i++) {\r\n                this.board[x][y + i] = shipName; \r\n            }\r\n        } else if (direction === 'vertical') {\r\n            if (x + shipSize > this.board.length) {\r\n                return false; \r\n            }\r\n            for (let i = 0; i < shipSize; i++) {\r\n                if (this.board[x + i][y] !== null) {\r\n                    return \"Occupied\";\r\n                }\r\n            }\r\n            for (let i = 0; i < shipSize; i++) {\r\n                this.board[x + i][y] = shipName; \r\n            }\r\n        }\r\n\r\n        this.ships.push(shipName); \r\n        return true; \r\n    }\r\n    \r\n\r\n    checkHit(target) {\r\n        const [x, y] = target; \r\n        this.board[x][y] = 'X';\r\n    }\r\n\r\n\r\n    isGameOver() {\r\n        return this.ships.every(ship => ship.isSunk());\r\n    }\r\n\r\n    clearBoard() {\r\n        this.board = Array(this.board.length).fill(null).map(() => Array(this.board[0].length).fill(null));\r\n        this.ships = [];\r\n    }\r\n\r\n    getShipsSunkCount() {\r\n        return this.ships.filter(ship => ship.isSunk()).length;\r\n    }\r\n\r\n    getShipsLeftCount() {\r\n        return this.ships.filter(ship => !ship.isSunk()).length;\r\n    }\r\n\r\n    getShipsOnBoard() {\r\n        return this.ships;\r\n    }\r\n    getSize() {\r\n        return this.size; \r\n    }\r\n\r\n    getCell(x, y) {\r\n        if (x < 0 || x >= this.size || y < 0 || y >= this.size) {\r\n            return null; \r\n        }\r\n        return this.board[x][y]; \r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://my-webpack-template/./src/Game/gameBoard.js?");

/***/ }),

/***/ "./src/Game/gameBoardUI.js":
/*!*********************************!*\
  !*** ./src/Game/gameBoardUI.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createGameBoard)\n/* harmony export */ });\nfunction createGameBoard(gridContainerId, boardSize) {\r\n    const gameboardElement = document.querySelector(`#${gridContainerId}`);\r\n    const letters = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'; \r\n\r\n    // Clear any existing content\r\n    gameboardElement.innerHTML = '';\r\n\r\n    // Add a data attribute to identify the player\r\n    gameboardElement.dataset.player = gridContainerId;\r\n\r\n    // Create the board grid with headers (A1, B2, etc.)\r\n    for (let i = 0; i <= boardSize; i++) {\r\n        for (let j = 0; j <= boardSize; j++) {\r\n            const cell = document.createElement('div');\r\n            \r\n            // Create the column headers (A, B, C, ...)\r\n            if (i === 0 && j > 0) {\r\n                cell.classList.add('header', 'column-header');\r\n                cell.textContent = letters[j]; // Column headers\r\n            }\r\n            // Create the row headers (1, 2, 3, ...)\r\n            else if (j === 0 && i > 0) {\r\n                cell.classList.add('header', 'row-header');\r\n                cell.textContent = i; // Row headers\r\n            }\r\n            // Create the actual grid cells\r\n            else if (i > 0 && j > 0) {\r\n                cell.classList.add('cell');\r\n                \r\n                // Create unique identifiers for cells\r\n                cell.id = `${gridContainerId}-cell-${i-1}-${j-1}`;\r\n                \r\n                // Add data attributes for coordinates\r\n                cell.dataset.player = gridContainerId;\r\n                cell.dataset.x = i - 1; // Adjust to 0-based index\r\n                cell.dataset.y = j - 1;\r\n            }\r\n\r\n            gameboardElement.appendChild(cell);\r\n        }\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://my-webpack-template/./src/Game/gameBoardUI.js?");

/***/ }),

/***/ "./src/Game/gameState.js":
/*!*******************************!*\
  !*** ./src/Game/gameState.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkGameInProgress: () => (/* binding */ checkGameInProgress),\n/* harmony export */   checkGameOver: () => (/* binding */ checkGameOver),\n/* harmony export */   declareWinner: () => (/* binding */ declareWinner),\n/* harmony export */   gameActive: () => (/* binding */ gameActive),\n/* harmony export */   gameInProgress: () => (/* binding */ gameInProgress),\n/* harmony export */   isPlayerTurn: () => (/* binding */ isPlayerTurn),\n/* harmony export */   newGame: () => (/* binding */ newGame),\n/* harmony export */   parseCellId: () => (/* binding */ parseCellId),\n/* harmony export */   placeRandomShips: () => (/* binding */ placeRandomShips),\n/* harmony export */   processAttack: () => (/* binding */ processAttack),\n/* harmony export */   setupBoard: () => (/* binding */ setupBoard)\n/* harmony export */ });\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship.js */ \"./src/Game/ship.js\");\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.js */ \"./src/Game/ui.js\");\n// Game State Module\r\n\r\n\r\n\r\n// Game state\r\nlet isPlayerTurn = true;\r\nlet gameActive = true;\r\nlet gameInProgress = false;\r\n\r\n// Check if game is in progress from localStorage\r\nfunction checkGameInProgress(playerName) {\r\n    try {\r\n        const playerData = localStorage.getItem(playerName);\r\n        const computerData = localStorage.getItem('computer');\r\n        // Consider game in progress if BOTH player and computer data exist\r\n        return playerData && computerData;\r\n    } catch (e) {\r\n        console.error(\"Error checking local storage:\", e);\r\n        return false;\r\n    }\r\n}\r\n\r\n// Process an attack on a cell\r\nfunction processAttack(player, x, y, cell) {\r\n    const board = player.board.board;\r\n    const cellValue = board[x][y];\r\n\r\n    if (cellValue === null) {\r\n        // Miss\r\n        board[x][y] = \"X\";\r\n        cell.classList.remove('ship');  // Remove ship styling\r\n        cell.classList.add('miss');\r\n        cell.textContent = 'X';\r\n        return \"Miss\";\r\n    }\r\n\r\n    // If the cell has a ship\r\n    const ship = player.ships.find(s => s.type === cellValue);\r\n    if (ship) {\r\n        board[x][y] = \"H\";\r\n        ship.hit();\r\n        cell.classList.remove('ship');  // Remove ship styling\r\n        cell.classList.add('hit');\r\n        cell.textContent = 'H';\r\n        return ship.isSunk() ? `Sunk ${ship.type}!` : \"Hit!\";\r\n    }\r\n\r\n    return \"Invalid\";\r\n}\r\n\r\n// Parse cell id to get coordinates\r\nfunction parseCellId(cellId) {\r\n    const match = cellId.match(/player2-grid-cell-(\\d+)-(\\d+)/);\r\n    return match ? [parseInt(match[1]), parseInt(match[2])] : null;\r\n}\r\n\r\n// Check if the game is over\r\nfunction checkGameOver(playerBoard, computerPlayer) {\r\n    const playerLost = playerBoard.ships.every(ship => ship.isSunk());\r\n    const computerLost = computerPlayer.ships.every(ship => ship.isSunk());\r\n\r\n    if (playerLost || computerLost) {\r\n        gameActive = false;\r\n        declareWinner(playerLost ? 'Computer' : 'Player', playerBoard.name);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// Declare winner and cleanup\r\nfunction declareWinner(winner, playerName) {\r\n    (0,_ui_js__WEBPACK_IMPORTED_MODULE_1__.showGameModal)(`${winner} Wins!`, `${winner === 'Player' ? 'Congratulations!' : 'Better luck next time!'}`);\r\n    \r\n    // Clear saved game state as the game is over\r\n    localStorage.removeItem(playerName);\r\n    localStorage.removeItem('computer');\r\n}\r\n\r\n// Handle new game request\r\nfunction newGame(playerBoard, computerPlayer) {\r\n    localStorage.removeItem(playerBoard.name);\r\n    localStorage.removeItem('computer');\r\n    \r\n    // Clear both boards\r\n    playerBoard.board.clearBoard();\r\n    computerPlayer.board.clearBoard();\r\n    \r\n    // Reset the game state\r\n    gameInProgress = false;\r\n    gameActive = true;\r\n    isPlayerTurn = true;\r\n    \r\n    return { gameInProgress, gameActive, isPlayerTurn };\r\n}\r\n\r\n// Initialize random ship placement for a board\r\nfunction placeRandomShips(player, shipConfig) {\r\n    player.placeShipsAutomatically(shipConfig);\r\n}\r\n\r\n// Setup a board with specific ships\r\nfunction setupBoard(playerBoard, ships) {\r\n    playerBoard.ships = ships.map(s => \r\n        new _ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](s.name, s.length, s.position, s.direction)\r\n    );\r\n    playerBoard.placeShipPlayer();\r\n    playerBoard.saveGameState();\r\n}\r\n\r\n \n\n//# sourceURL=webpack://my-webpack-template/./src/Game/gameState.js?");

/***/ }),

/***/ "./src/Game/placement.js":
/*!*******************************!*\
  !*** ./src/Game/placement.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlacedShips: () => (/* binding */ getPlacedShips),\n/* harmony export */   initPlacement: () => (/* binding */ initPlacement),\n/* harmony export */   removePlacementListeners: () => (/* binding */ removePlacementListeners),\n/* harmony export */   resetPlacement: () => (/* binding */ resetPlacement),\n/* harmony export */   setupPlacementListeners: () => (/* binding */ setupPlacementListeners),\n/* harmony export */   shipsToPlace: () => (/* binding */ shipsToPlace),\n/* harmony export */   updatePlacementUI: () => (/* binding */ updatePlacementUI)\n/* harmony export */ });\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.js */ \"./src/Game/ui.js\");\n// Ship Placement Module\r\n\r\n\r\n\r\n// Ship placement data\r\nconst shipsToPlace = [\r\n    { name: 'Carrier', length: 5 },\r\n    { name: 'Battleship', length: 4 },\r\n    { name: 'Destroyer', length: 3 },\r\n    { name: 'Submarine', length: 3 },\r\n    { name: 'Patrol Boat', length: 2 },\r\n];\r\n\r\nlet placementState = {\r\n    ships: shipsToPlace.map(s => ({ ...s, placed: false, position: null, direction: 'horizontal' })),\r\n    current: 0,\r\n    direction: 'horizontal',\r\n};\r\n\r\n// UI references\r\nlet shipList;\r\nlet player1Grid;\r\nlet startGameBtn;\r\n\r\n// Initialize placement UI and state\r\nfunction initPlacement() {\r\n    shipList = document.getElementById('ship-list');\r\n    player1Grid = document.getElementById('player1-grid');\r\n    startGameBtn = document.getElementById('start-game-button');\r\n    \r\n    renderShipList();\r\n    setupPlacementListeners();\r\n}\r\n\r\n// Update placement UI\r\nfunction updatePlacementUI() {\r\n    renderShipList();\r\n    startGameBtn.disabled = !placementState.ships.every(s => s.placed);\r\n}\r\n\r\n// Render the ship list in the placement modal\r\nfunction renderShipList() {\r\n    shipList.innerHTML = '';\r\n    placementState.ships.forEach((ship, idx) => {\r\n        const li = document.createElement('li');\r\n        li.textContent = `${ship.name} (${ship.length})`;\r\n        if (ship.placed) li.classList.add('placed');\r\n        if (idx === placementState.current && !ship.placed) li.classList.add('selected');\r\n        li.addEventListener('click', () => {\r\n            if (!ship.placed) {\r\n                placementState.current = idx;\r\n                updatePlacementUI();\r\n            }\r\n        });\r\n        shipList.appendChild(li);\r\n    });\r\n}\r\n\r\n// Mouse event handlers for ship placement\r\nfunction handlePlacementHover(e) {\r\n    if (!isPlacingShips()) return;\r\n    const cell = e.target;\r\n    if (!cell.classList.contains('cell')) return;\r\n    const x = parseInt(cell.dataset.x);\r\n    const y = parseInt(cell.dataset.y);\r\n    const ship = placementState.ships[placementState.current];\r\n    highlightPlacement(x, y, ship.length, placementState.direction, canPlaceShip(x, y, ship.length, placementState.direction));\r\n}\r\n\r\nfunction clearPlacementHover() {\r\n    Array.from(player1Grid.children).forEach(cell => cell.classList.remove('placement-ok', 'placement-bad'));\r\n}\r\n\r\nfunction handlePlacementClick(e) {\r\n    if (!isPlacingShips()) return;\r\n    const cell = e.target;\r\n    if (!cell.classList.contains('cell')) return;\r\n    const x = parseInt(cell.dataset.x);\r\n    const y = parseInt(cell.dataset.y);\r\n    const ship = placementState.ships[placementState.current];\r\n    if (canPlaceShip(x, y, ship.length, placementState.direction)) {\r\n        placeShipOnGrid(x, y, ship.length, placementState.direction, ship.name);\r\n        ship.placed = true;\r\n        ship.position = [x, y];\r\n        ship.direction = placementState.direction;\r\n        // Move to next unplaced ship\r\n        const next = placementState.ships.findIndex(s => !s.placed);\r\n        placementState.current = next === -1 ? 0 : next;\r\n        updatePlacementUI();\r\n    } else {\r\n        (0,_ui_js__WEBPACK_IMPORTED_MODULE_0__.shakeGrid)();\r\n    }\r\n}\r\n\r\n// Helper for checking if placement is active\r\nfunction isPlacingShips() {\r\n    const startModal = document.getElementById('start-modal');\r\n    return startModal.style.display !== 'none' && placementState.ships.some(s => !s.placed);\r\n}\r\n\r\n// Check if a ship can be placed at the given position\r\nfunction canPlaceShip(x, y, length, direction) {\r\n    // Check bounds and overlap\r\n    for (let i = 0; i < length; i++) {\r\n        let xi = direction === 'horizontal' ? x : x + i;\r\n        let yi = direction === 'horizontal' ? y + i : y;\r\n        if (xi > 9 || yi > 9) return false;\r\n        const cell = document.getElementById(`player1-grid-cell-${xi}-${yi}`);\r\n        if (!cell || cell.classList.contains('ship')) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// Highlight cells for ship placement\r\nfunction highlightPlacement(x, y, length, direction, ok) {\r\n    clearPlacementHover();\r\n    for (let i = 0; i < length; i++) {\r\n        let xi = direction === 'horizontal' ? x : x + i;\r\n        let yi = direction === 'horizontal' ? y + i : y;\r\n        const cell = document.getElementById(`player1-grid-cell-${xi}-${yi}`);\r\n        if (cell) cell.classList.add(ok ? 'placement-ok' : 'placement-bad');\r\n    }\r\n}\r\n\r\n// Place ship on the grid\r\nfunction placeShipOnGrid(x, y, length, direction, name) {\r\n    for (let i = 0; i < length; i++) {\r\n        let xi = direction === 'horizontal' ? x : x + i;\r\n        let yi = direction === 'horizontal' ? y + i : y;\r\n        const cell = document.getElementById(`player1-grid-cell-${xi}-${yi}`);\r\n        if (cell) {\r\n            cell.classList.add('ship');\r\n            cell.style.backgroundColor = '#cacbd8';\r\n        }\r\n    }\r\n}\r\n\r\n// Add placement event listeners\r\nfunction setupPlacementListeners() {\r\n    player1Grid.addEventListener('mouseover', handlePlacementHover);\r\n    player1Grid.addEventListener('mouseout', clearPlacementHover);\r\n    player1Grid.addEventListener('click', handlePlacementClick);\r\n    \r\n    // Rotate button listener\r\n    const rotateShipButton = document.getElementById('rotate-ship-button');\r\n    if (rotateShipButton) {\r\n        rotateShipButton.addEventListener('click', () => {\r\n            placementState.direction = placementState.direction === 'horizontal' ? 'vertical' : 'horizontal';\r\n        });\r\n    }\r\n    \r\n    // Reset button listener\r\n    const resetPlacementButton = document.getElementById('reset-placement-button');\r\n    if (resetPlacementButton) {\r\n        resetPlacementButton.addEventListener('click', resetPlacement);\r\n    }\r\n}\r\n\r\n// Clean up placement event listeners\r\nfunction removePlacementListeners() {\r\n    player1Grid.removeEventListener('mouseover', handlePlacementHover);\r\n    player1Grid.removeEventListener('mouseout', clearPlacementHover);\r\n    player1Grid.removeEventListener('click', handlePlacementClick);\r\n}\r\n\r\n// Reset ship placement\r\nfunction resetPlacement() {\r\n    // Reset placement state\r\n    placementState = {\r\n        ships: shipsToPlace.map(s => ({ ...s, placed: false, position: null, direction: 'horizontal' })),\r\n        current: 0,\r\n        direction: 'horizontal',\r\n    };\r\n    // Clear player grid UI\r\n    Array.from(player1Grid.children).forEach(cell => {\r\n        cell.classList.remove('ship', 'placement-ok', 'placement-bad', 'miss', 'hit');\r\n        cell.textContent = '';\r\n        cell.style.backgroundColor = '';\r\n    });\r\n    updatePlacementUI();\r\n    startGameBtn.disabled = true;\r\n}\r\n\r\n// Get placed ships for game initialization\r\nfunction getPlacedShips() {\r\n    return placementState.ships.filter(s => s.placed);\r\n}\r\n\r\n \n\n//# sourceURL=webpack://my-webpack-template/./src/Game/placement.js?");

/***/ }),

/***/ "./src/Game/player.js":
/*!****************************!*\
  !*** ./src/Game/player.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _gameBoard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameBoard.js */ \"./src/Game/gameBoard.js\");\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ship.js */ \"./src/Game/ship.js\");\n\r\n\r\n\r\nclass Player {\r\n    constructor(name, ships = []) {\r\n        this.name = name;\r\n        this.board = this.createBoard(10); \r\n        this.ships = ships;\r\n        this.shotHistory = [];\r\n    }\r\n\r\n    \r\n    // Method to initialize the game with the saved board.\r\n    initialize() {\r\n        const player = localStorage.getItem(this.name);\r\n        if(!player){\r\n            this.saveGameState();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Saves the current board\r\n    saveGameState(){\r\n        // Custom serialization to extract the essential information\r\n        const gameState = {\r\n            name: this.name,\r\n            board: this.board.serializeBoard(), // We will define this method below\r\n            ships: this.ships.map(ship => ({\r\n                type: ship.type,\r\n                length: ship.length,\r\n                position: ship.position,\r\n                direction: ship.direction,\r\n                hits: ship.hits,\r\n            })),\r\n            shotHistory: this.shotHistory\r\n        };\r\n    \r\n        localStorage.setItem(this.name, JSON.stringify(gameState));\r\n        //console.log(\"Game saved:\", localStorage.getItem(\"gameState\"));\r\n    }\r\n    \r\n    //Loads the current/updated board\r\n    loadGameState(){\r\n        const savedGameState = JSON.parse(localStorage.getItem(this.name));\r\n        if (savedGameState) {\r\n            // Reconstruct board\r\n            this.board = new _gameBoard_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](10, this.name);\r\n            this.board.deserializeBoard(savedGameState.board);  // Custom deserialization method\r\n            \r\n            // Reconstruct ships\r\n            this.ships = savedGameState.ships.map(shipData => new _ship_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](shipData.type, shipData.length, shipData.position, shipData.direction));\r\n    \r\n            // Restore shot history\r\n            this.shotHistory = savedGameState.shotHistory;\r\n            console.log(this.name)\r\n            console.table(\"Game loaded:\", this.board.board, this.ships, this.shotHistory);\r\n            console.table(this.board.board)\r\n        } else {\r\n            console.log(\"No saved game found.\");\r\n        }\r\n    }\r\n    \r\n    playerShips(){\r\n        this.ships.forEach(\r\n            ship => console.log(ship)\r\n        )\r\n    }\r\n    createBoard(size, name) {\r\n        const newBoard = new _gameBoard_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](size, this.name);\r\n        return newBoard;\r\n    }\r\n\r\n    placeShipPlayer() {\r\n        this.ships.forEach(\r\n            ship => this.board.placeShip(ship.type, ship.length, ship.position, ship.direction)\r\n        );\r\n    }\r\n\r\n    playerGetShot() {\r\n        let shotPosition;\r\n        let hit = false;\r\n\r\n        do {\r\n            shotPosition = this.getRandomPosition();\r\n            // Check if the shot position has already been fired at\r\n            hit = !this.shotHistory.some(shot => shot.target[0] === shotPosition[0] && shot.target[1] === shotPosition[1]);\r\n\r\n            if (hit) {\r\n                // Record the shot in history\r\n                const hitResult = this.board.checkHit(shotPosition);\r\n                this.shotHistory.push({ target: shotPosition, hit: hitResult });\r\n            }\r\n        } while (!hit); // Repeat until a new shot is fired\r\n\r\n        return shotPosition; // Return the position of the shot\r\n    }\r\n\r\n    isSunk() {\r\n        return this.ships.every(ship => ship.isSunk()); \r\n    }\r\n\r\n    getShipsLeft() {\r\n        return this.ships.filter(ship => !ship.isSunk()).length; \r\n    }\r\n\r\n    getBoard() {\r\n        return this.board;\r\n    }\r\n\r\n    getName() {\r\n        console.log(this.name);\r\n    }\r\n\r\n    getScore() {\r\n        return this.shotHistory.filter(shot => shot.hit).length; \r\n    }\r\n\r\n    getHealth() {\r\n        return this.ships.reduce((total, ship) => total + ship.getHealth(), 0); \r\n    }\r\n\r\n    isGameOver() {\r\n        return this.getShipsLeft() === 0; \r\n    }\r\n\r\n    getRemainingShots() {\r\n        return 100 - this.shotHistory.length; \r\n    }\r\n\r\n    // Returns the current game status\r\n    getGameStatus() {\r\n        return {\r\n            score: this.getScore(),\r\n            shipsLeft: this.getShipsLeft(),\r\n            health: this.getHealth(),\r\n            remainingShots: this.getRemainingShots(),\r\n            isGameOver: this.isGameOver(),\r\n        };\r\n    }\r\n\r\n    // Returns the history of all shots made by the player\r\n    getShotHistory() {\r\n        return this.shotHistory;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://my-webpack-template/./src/Game/player.js?");

/***/ }),

/***/ "./src/Game/ship.js":
/*!**************************!*\
  !*** ./src/Game/ship.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ship)\n/* harmony export */ });\nclass Ship {\r\n    constructor(type, length, position, direction) {\r\n        this.type = type; \r\n        this.length = length; \r\n        this.position = position; \r\n        this.direction = direction;\r\n        this.hits = 0; \r\n    }\r\n\r\n    hit() {\r\n        this.hits = this.hits + 1; \r\n        console.log(`${this.type} hit count: ${this.hits}`);\r\n        if (this.isSunk()) {\r\n            console.log(`${this.type} ship sunk!`);\r\n        } else {\r\n            console.log(`${this.type} ship hit!`);\r\n        }\r\n    }\r\n    isSunk() {\r\n        return this.hits >= this.length;\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack://my-webpack-template/./src/Game/ship.js?");

/***/ }),

/***/ "./src/Game/ui.js":
/*!************************!*\
  !*** ./src/Game/ui.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hideGameInterface: () => (/* binding */ hideGameInterface),\n/* harmony export */   hideGameModal: () => (/* binding */ hideGameModal),\n/* harmony export */   hideStartModal: () => (/* binding */ hideStartModal),\n/* harmony export */   initUI: () => (/* binding */ initUI),\n/* harmony export */   movePlayerGridToGameArea: () => (/* binding */ movePlayerGridToGameArea),\n/* harmony export */   renderGameState: () => (/* binding */ renderGameState),\n/* harmony export */   shakeGrid: () => (/* binding */ shakeGrid),\n/* harmony export */   showGameInterface: () => (/* binding */ showGameInterface),\n/* harmony export */   showGameModal: () => (/* binding */ showGameModal),\n/* harmony export */   showStartModal: () => (/* binding */ showStartModal)\n/* harmony export */ });\n// UI Module - Handles UI-related functionality\r\n\r\n// UI Elements\r\nlet startModal;\r\nlet gameModal;\r\nlet modalTitle;\r\nlet modalMessage;\r\nlet startGameButton;\r\nlet closeModalButton;\r\nlet newGameButton;\r\nlet player2Grid;\r\nlet rotateShipButton;\r\nlet player1Grid;\r\nlet resetPlacementButton;\r\nlet shipList;\r\n\r\n// Initialize UI elements\r\nfunction initUI() {\r\n    startModal = document.getElementById('start-modal');\r\n    gameModal = document.getElementById('game-modal');\r\n    modalTitle = document.getElementById('modal-title');\r\n    modalMessage = document.getElementById('modal-message');\r\n    startGameButton = document.getElementById('start-game-button');\r\n    closeModalButton = document.getElementById('close-modal-button');\r\n    newGameButton = document.getElementById('new-game-button');\r\n    player2Grid = document.getElementById('player2-grid');\r\n    rotateShipButton = document.getElementById('rotate-ship-button');\r\n    player1Grid = document.getElementById('player1-grid');\r\n    resetPlacementButton = document.getElementById('reset-placement-button');\r\n    shipList = document.getElementById('ship-list');\r\n}\r\n\r\n// Modal functions\r\nfunction showStartModal() {\r\n    startModal.style.display = 'flex';\r\n    player2Grid.style.pointerEvents = 'none';\r\n    newGameButton.style.display = 'none';\r\n}\r\n\r\nfunction hideStartModal() {\r\n    startModal.style.display = 'none';\r\n    player2Grid.style.pointerEvents = 'auto';\r\n    newGameButton.style.display = 'inline-block';\r\n}\r\n\r\nfunction showGameModal(title, message) {\r\n    modalTitle.textContent = title;\r\n    modalMessage.textContent = message;\r\n    gameModal.classList.add('active');\r\n    gameModal.style.display = 'flex';\r\n    player2Grid.style.pointerEvents = 'none';\r\n}\r\n\r\nfunction hideGameModal() {\r\n    gameModal.classList.remove('active');\r\n    gameModal.style.display = 'none';\r\n    player2Grid.style.pointerEvents = 'auto';\r\n}\r\n\r\n// Game interface functions\r\nfunction showGameInterface() {\r\n    if (newGameButton) newGameButton.style.display = 'inline-block';\r\n    movePlayerGridToGameArea();\r\n}\r\n\r\nfunction hideGameInterface() {\r\n    if (newGameButton) newGameButton.style.display = 'none';\r\n}\r\n\r\n// Move player1-grid from modal to game area\r\nfunction movePlayerGridToGameArea() {\r\n    const playerGridContainer = document.querySelector('.player-1 .inner-container');\r\n    const playerGrid = document.getElementById('player1-grid');\r\n    \r\n    if (playerGrid && playerGridContainer && !playerGridContainer.contains(playerGrid)) {\r\n        playerGridContainer.appendChild(playerGrid);\r\n    }\r\n}\r\n\r\n// Render the game state onto the grid\r\nfunction renderGameState(player, gridId, hideShips = false) {\r\n    const board = player.board.board;\r\n    const grid = document.getElementById(gridId);\r\n    if (!grid) {\r\n        console.error(`Grid with ID ${gridId} not found`);\r\n        return;\r\n    }\r\n\r\n    // Clear all cell classes and text before rendering\r\n    Array.from(grid.children).forEach(cell => {\r\n        if (cell.classList.contains('cell')) {\r\n            cell.classList.remove('ship', 'miss', 'hit');\r\n            cell.textContent = '';\r\n            cell.style.backgroundColor = '';\r\n        }\r\n    });\r\n\r\n    // Render ships first (if not hiding)\r\n    if (!hideShips && player.ships) {\r\n        player.ships.forEach(ship => {\r\n            if (!ship.position) return;\r\n            const [x, y] = ship.position;\r\n            const direction = ship.direction;\r\n            for (let i = 0; i < ship.length; i++) {\r\n                let xi = direction === 'horizontal' ? x : x + i;\r\n                let yi = direction === 'horizontal' ? y + i : y;\r\n                const cellId = `${gridId}-cell-${xi}-${yi}`;\r\n                const cell = document.getElementById(cellId);\r\n                if (cell) {\r\n                    cell.classList.add('ship');\r\n                    cell.style.backgroundColor = '#cacbd8';\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Then render hits and misses (they override ship display)\r\n    for (let x = 0; x < board.length; x++) {\r\n        for (let y = 0; y < board[x].length; y++) {\r\n            const cellId = `${gridId}-cell-${x}-${y}`;\r\n            const cell = document.getElementById(cellId);\r\n            if (!cell) continue;\r\n            \r\n            const cellValue = board[x][y];\r\n            if (cellValue === \"X\") {\r\n                cell.classList.remove('ship');\r\n                cell.classList.add('miss');\r\n                cell.textContent = 'X';\r\n            } else if (cellValue === \"H\") {\r\n                cell.classList.add('hit');\r\n                cell.textContent = 'H';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Add shake animation for invalid placement\r\nfunction shakeGrid() {\r\n    player1Grid.classList.add('shake');\r\n    setTimeout(() => player1Grid.classList.remove('shake'), 400);\r\n}\r\n\r\n// Export functions\r\n \n\n//# sourceURL=webpack://my-webpack-template/./src/Game/ui.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game_gameBoardUI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game/gameBoardUI.js */ \"./src/Game/gameBoardUI.js\");\n/* harmony import */ var _Game_player_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Game/player.js */ \"./src/Game/player.js\");\n/* harmony import */ var _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Game/ship.js */ \"./src/Game/ship.js\");\n/* harmony import */ var _Game_computerAI_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Game/computerAI.js */ \"./src/Game/computerAI.js\");\n/* harmony import */ var _Game_ui_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Game/ui.js */ \"./src/Game/ui.js\");\n/* harmony import */ var _Game_placement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Game/placement.js */ \"./src/Game/placement.js\");\n/* harmony import */ var _Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Game/gameState.js */ \"./src/Game/gameState.js\");\n\n\n\n\n\n\n\n\n// Game state variables\nlet gameIsActive = _Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.gameActive;\nlet gameIsPlayerTurn = _Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.isPlayerTurn;\nlet gameIsInProgress = _Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.gameInProgress;\n\n// Initialize players\nconst playerOneBoard = new _Game_player_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Hudson\", [\n    new _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('Carrier', 5, [0, 0], 'vertical'),\n    new _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('Battleship', 4, [0, 3], 'horizontal'),\n    new _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('Destroyer', 3, [6, 0], 'vertical'),\n    new _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('Submarine', 3, [4, 4], 'horizontal'),\n    new _Game_ship_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('Patrol Boat', 2, [7, 7], 'vertical'),\n]);\n\nconst computerPlayer = new _Game_computerAI_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]('computer');\n\n// Create opponent grid\n(0,_Game_gameBoardUI_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('player2-grid', 10);\n\n// Initialize game on load\nfunction initializeGame() {\n    // Initialize UI elements\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.initUI)();\n    \n    // Add event listeners\n    document.getElementById('player2-grid').addEventListener('click', handlePlayerAttack);\n    document.getElementById('new-game-button').addEventListener('click', handleNewGame);\n    \n    // Check if game is in progress\n    gameIsInProgress = (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.checkGameInProgress)(playerOneBoard.name);\n    \n    if (gameIsInProgress) {\n        // First create the player1 grid in both the modal and main game area\n        if (!document.getElementById('player1-grid') || \n            !document.getElementById('player1-grid').children.length) {\n            (0,_Game_gameBoardUI_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('player1-grid', 10);\n        }\n        \n        // Load game data for both players\n        playerOneBoard.loadGameState();\n        computerPlayer.loadGameState();\n        \n        // Move player grid to game area\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.movePlayerGridToGameArea)();\n        \n        // Now render the boards after they exist\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.renderGameState)(playerOneBoard, 'player1-grid', false); // Don't hide player ships!\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.renderGameState)(computerPlayer, 'player2-grid', true); // Hide computer ships\n        \n        // Hide placement modal, show game interface\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.hideStartModal)();\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.showGameInterface)();\n    } else {\n        // Create the player grid in the modal for placement\n        if (!document.getElementById('player1-grid') || \n            !document.getElementById('player1-grid').children.length) {\n            (0,_Game_gameBoardUI_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('player1-grid', 10);\n        }\n        \n        // New game - set up computer ships\n        (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.placeRandomShips)(computerPlayer, [\n            { name: 'Carrier', length: 5 },\n            { name: 'Battleship', length: 4 },\n            { name: 'Destroyer', length: 3 },\n            { name: 'Submarine', length: 3 },\n            { name: 'Patrol Boat', length: 2 },\n        ]);\n        \n        // Initialize ship placement UI\n        (0,_Game_placement_js__WEBPACK_IMPORTED_MODULE_5__.initPlacement)();\n        \n        // Show placement modal, hide game interface\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.showStartModal)();\n        \n        // Add start game button listener\n        document.getElementById('start-game-button').addEventListener('click', handleStartGame);\n        document.getElementById('close-modal-button').addEventListener('click', _Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.hideGameModal);\n    }\n}\n\n// Player attack handler\nfunction handlePlayerAttack(event) {\n    if (!gameIsActive || !gameIsPlayerTurn) return;\n\n    const cell = event.target;\n    const position = (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.parseCellId)(cell.id);\n\n    if (!position || cell.classList.contains('hit') || cell.classList.contains('miss')) {\n        alert('Invalid move or position already attacked.');\n        return;\n    }\n\n    const [x, y] = position;\n    const result = (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.processAttack)(computerPlayer, x, y, cell);\n\n    console.log(`Player attack result: ${result}`);\n    playerOneBoard.saveGameState(); // Save after attack\n    computerPlayer.saveGameState(); // Save after attack\n\n    // Notify player if a ship was sunk\n    if (typeof result === 'string' && result.startsWith('Sunk')) {\n        (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.showGameModal)('Ship Sunk!', `You sunk the opponent's ${result.replace('Sunk ', '').replace('!', '')}!`);\n        setTimeout(() => (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.hideGameModal)(), 1500);\n    }\n\n    if ((0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.checkGameOver)(playerOneBoard, computerPlayer)) return;\n\n    gameIsPlayerTurn = false;\n    setTimeout(handleComputerAttack, 1000);\n}\n\n// Computer attack handler\nfunction handleComputerAttack() {\n    if (!gameIsActive || gameIsPlayerTurn) return;\n\n    const [x, y] = computerPlayer.getRandomPosition();\n    const cell = document.getElementById(`player1-grid-cell-${x}-${y}`);\n    const result = (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.processAttack)(playerOneBoard, x, y, cell);\n\n    console.log(`Computer attack result: ${result}`);\n    playerOneBoard.saveGameState(); // Save after attack\n    computerPlayer.saveGameState(); // Save after attack\n\n    if ((0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.checkGameOver)(playerOneBoard, computerPlayer)) return;\n\n    gameIsPlayerTurn = true;\n}\n\n// Handle start game button click\nfunction handleStartGame() {\n    // Remove event listeners for placement\n    (0,_Game_placement_js__WEBPACK_IMPORTED_MODULE_5__.removePlacementListeners)();\n    \n    // Move grid to main gameboard\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.movePlayerGridToGameArea)();\n    \n    // Set up playerOneBoard with placed ships\n    const placedShips = (0,_Game_placement_js__WEBPACK_IMPORTED_MODULE_5__.getPlacedShips)();\n    (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.setupBoard)(playerOneBoard, placedShips);\n    \n    // Save game state and prepare game\n    computerPlayer.saveGameState();\n    gameIsInProgress = true;\n    \n    // Update UI\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.hideStartModal)();\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.showGameInterface)();\n}\n\n// Handle new game button click\nfunction handleNewGame() {\n    const { gameInProgress, gameActive, isPlayerTurn } = (0,_Game_gameState_js__WEBPACK_IMPORTED_MODULE_6__.newGame)(playerOneBoard, computerPlayer);\n    gameIsInProgress = gameInProgress;\n    gameIsActive = gameActive;\n    gameIsPlayerTurn = isPlayerTurn;\n    \n    // Reset UI for placement\n    (0,_Game_placement_js__WEBPACK_IMPORTED_MODULE_5__.resetPlacement)();\n    \n    // Make sure grids are properly rendered\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.renderGameState)(playerOneBoard, 'player1-grid');\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.renderGameState)(computerPlayer, 'player2-grid', true);\n    \n    // Update UI state\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.showStartModal)();\n    (0,_Game_ui_js__WEBPACK_IMPORTED_MODULE_4__.hideGameInterface)();\n\n    // Re-initialize ship placement UI and listeners\n    (0,_Game_placement_js__WEBPACK_IMPORTED_MODULE_5__.initPlacement)();\n}\n\n// Initialize the game when DOM is ready\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n\n\n\n//# sourceURL=webpack://my-webpack-template/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;